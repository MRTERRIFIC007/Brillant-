// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    UNSET
    CREATOR
    STUDENT
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    email              String?              @unique
    emailVerified      DateTime?
    image              String?
    role               UserRole             @default(UNSET)
    accounts           Account[]
    sessions           Session[]
    Course             Course[]
    CourseUser         CourseUser[]
    UserLessonProgress UserLessonProgress[]
}

model Course {
    id          String       @id @default(cuid())
    name        String
    tags        String[]
    description String
    thumbnail   String
    creator     User         @relation(references: [id], fields: [creatorId])
    creatorId   String
    Lesson      Lesson[]
    CourseUser  CourseUser[]
}

model Lesson {
    id                 String               @id @default(cuid())
    name               String
    description        String
    videoUrl           String
    videoIndex         Int
    course             Course               @relation(references: [id], fields: [courseId])
    courseId           String
    UserLessonProgress UserLessonProgress[]
}

model CourseUser {
    id       String @id @default(cuid())
    course   Course @relation(references: [id], fields: [courseId])
    courseId String
    user     User   @relation(references: [id], fields: [userId])
    userId   String
}

model UserLessonProgress {
    id        String @id @default(cuid())
    user      User   @relation(references: [id], fields: [userId])
    userId    String
    lesson    Lesson @relation(references: [id], fields: [lessonId])
    lessonId  String
    timestamp Int
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
